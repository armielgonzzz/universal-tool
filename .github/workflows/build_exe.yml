name: Build and Release .exe

on:
  push:
    tags:
      - '*'

jobs:
  build:
    runs-on: windows-latest
    
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10.11'

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Install PyInstaller and create the .exe
      - name: Build executable
        run: |
          pip install pyinstaller
          pyinstaller --onefile --icon=misc\tool_icon.ico --uac-admin main.py  # Replace with your main script

      # Archive the .exe file for GitHub release
      - name: Archive the .exe
        run: |
          mkdir release
          copy dist\main.exe release\main.exe
          echo "Creating archive complete"

      # Upload to GitHub Releases
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/main.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Get the tag details
      - name: Get tag details
        id: get_tag_details
        shell: pwsh
        run: |
          # Get the latest tag
          $TAG_NAME = git describe --tags --abbrev=0
          
          # Extract the tag message
          $TAG_MESSAGE = git for-each-ref refs/tags/$TAG_NAME --format="%(contents)"
          
          # Output the tag name and message as environment variables
          echo "tag_name=$TAG_NAME" >> $env:GITHUB_ENV
          echo "tag_message=$TAG_MESSAGE" >> $env:GITHUB_ENV

      # Notify Slack
      - name: Notify Slack
        shell: pwsh
        run: |
          # Prepare the payload
          $body = @{
              body = $env:tag_message
              version = $env:tag_name
          } | ConvertTo-Json -Depth 2

          # Send the notification
          Invoke-RestMethod -Uri ${{ secrets.SLACK_WEBHOOK_URL }} -Method Post -ContentType 'application/json' -Body $body
